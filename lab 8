q2 ) #include <stdio.h>

#define MAX_TRANSACTIONS 7

int main() {
    int balance = 1000;  
    int transactions[MAX_TRANSACTIONS] = {-200, 300, -150, -1200, -500, 200, -100}; 
    int numTransactions = 7;  

  
    for (int i = 0; i < numTransactions; i++) {
        int transaction = transactions[i];

        if (transaction < 0 && -transaction > balance) {
                continue;  
            }

        balance = transaction+balance;
        printf("Transaction processed.\n");
    }

    printf("\nFinal balance: %d\n", balance);

    return 0;
}
q1 ) 
#include <stdio.h>
#include <stdbool.h>

bool isValid(const int arr[], int length, int pos) {
    return pos >= 0 && pos < length;
}

int main() {
    int arr[] = {1, 2, 3, 4, 5};  
    int length = sizeof(arr) / sizeof(arr[0]); 
    int testPositions[] = {-1, 0, 2, 4, 5};
    int numTests = sizeof(testPositions) / sizeof(testPositions[0]);

    for (int i = 0; i < numTests; i++) {
        int pos = testPositions[i];
        if (isValid(arr, length, pos)) {
            printf("Position %d is valid.\n", pos);
        } else {
            printf("Position %d is invalid.\n", pos);
        }
    }

    return 0;
}
#include <stdio.h>

void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat_transp[nCols][nRows]) {

    for (int i = 0; i < nRows; i++) {
        for (int j = 0; j < nCols; j++) {
            mat_transp[j][i] = mat[i][j];
        }
    }
}

int main() {
    int mat[3][2] = {
        {2, 2},
        {3, 4},
        {5, 6}
    };

    int mat_transp[2][3];  

    trans_matrix(3, 2, mat, mat_transp);

    printf("Transposed Matrix:\n");
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%d ", mat_transp[i][j]);
        }
        printf("\n");
    }

    return 0;
}
